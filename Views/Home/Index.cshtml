@using Microsoft.AspNetCore.Mvc.Localization;
@* inyectamos IViewLocalizer, para poder tradur la pagina, adicionalmente debemos importar la directiva *@
@inject IViewLocalizer localizer;
@* @{
    ViewData["Title"] = "Home Page";
} *@

@* <div class="text-center">
    <h1 class="display-4">@localizer["Bienvenido"]</h1>
    <p>@localizer["Aprende más"]</p>
</div> *@

@* <div>
    <h3>@ViewBag.Saludo, David</h3>
</div> *@

@* <button onclick="mostrarError()">
    Mostrar mensaje
</button> *@

@* @section Scripts{
    <script src="~/js/utilidades.js"></script>
} *@

@{
    ViewData["Title"] = "Listado de tareas";
}

<div class="text-center">
    <h1 class="display-4">
        @localizer["Mis tareas"]
    </h1>
</div>

@* estructura, donde  se mostraran las tareas*@
<div id="contenedor-listado-tareas" class="text-center">
    @* data-bind, nos permitira usar las propiedades de tareaListadoViewModel usando KNOCKOUTJS  *@
    <div class="text-start" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor:pointer">
            @* tomaremos una propiedad d elos elemtnos del arreglo *@
            <div data-bind="text: titulo" class="fw-bold">
            </div>
        </div>
    </div>

    @* animacion de cargando la data*@
    <div data-bind="visible: cargando" class="spinner-border">
        <span class="visually-hidden">
            Cargando...
        </span>
    </div>
</div>

@section Scripts{
    <script>
        // asiganamos un objeto a la varibales, y este objeto tiene su propiedad llamada tareas
        //la cual le estamos asiganndo un observable, que es un arreglo
        const tareaListadoViewModel = {
            //con observableArray, estamos diciendo que los cambios que ocurran en esta propiedad se van a reflejar
            //en la interfas grafica de la aplicacion
            //y se actualizara de forma automaticamente, ya que es un observableArray, y reaccionara a la
            //propiedad tareas, a cualqueir cambio que ocurra en tareas
            tareas: ko.observableArray([
                // { titulo: 'Tarea 1' },
                // { titulo: 'Tarea 2' },
                // { titulo: 'Tarea 3' },
                // { titulo: 'Tarea 4' },
            ]),
            //creamos una propiedad para ver si estamso cargando o no
            //observable, sera un simple valor en este caso un boleano
            cargando: ko.observable(true)
        }

        //ejecutamos una tarea depsues de un tiempo
        setTimeout(() => {
            //se ejecutara luego de 2 segundos lo que este dentro de los corchetes
            tareaListadoViewModel.tareas.push({ titulo: 'Tarea titulo push' });
            //actualizamos un observable
            tareaListadoViewModel.cargando(false)
        }, 2000)

        //aplicamos KNOCKOUTJS en la vista html usanod el id, debemos usar la palabra reservada
        //ko, que invoca a KNOCKOUTJS
        ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'))
    </script>
}