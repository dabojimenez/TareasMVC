@using Microsoft.AspNetCore.Mvc.Localization;
@* inyectamos IViewLocalizer, para poder tradur la pagina, adicionalmente debemos importar la directiva *@
@inject IViewLocalizer localizer;

@{
    ViewData["Title"] = "Listado de tareas";
}

<div class="text-center">
    <h1 class="display-4">
        @localizer["Mis tareas"]
    </h1>
    <button type="button" class="btn btn-primary mb-3"
            onclick="agregarNuevaTareaAlListado()">
        @localizer["Agregar nueva tarea"]
    </button>
</div>

@* estructura, donde  se mostraran las tareas*@
<div id="contenedor-listado-tareas" class="text-center">
    @* data-bind, nos permitira usar las propiedades de tareaListadoViewModel usando KNOCKOUTJS  *@
    <div class="text-start" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor:pointer">
            @* tomaremos una propiedad de los elemtnos del arreglo *@
            <div data-bind="text: titulo, hidden: esNuevo" class="fw-bold">
            </div>

            <input type="text" name="titulo-tarea" autocomplete="off"
                   data-bind="value: titulo, visible: esNuevo, event: {focusout: manejarFocusoutTituloTarea}" />
        </div>
    </div>

    @* animacion de cargando la data*@
    <div data-bind="visible: cargando" class="spinner-border">
        <span class="visually-hidden">
            Cargando...
        </span>
    </div>

    @* mensaje al no existir tareas en el arreglo *@
    <div data-bind="visible: noHayTareas">
        No existen tareas para mostrar
    </div>
</div>

@section Scripts{
    @* //importamos la funcion que agrega la tarea usando javascript *@
    @* asp-append-version="true", para que siempre se actualice *@

    <script src="~/js/tareas.js" asp-append-version="true"></script>

    <script>
        //agregamos la direccion url
        const urlTareas = "/api/Tareas";

        // asiganamos un objeto a la varibales, y este objeto tiene su propiedad llamada tareas
        //la cual le estamos asiganndo un observable, que es un arreglo
        // const tareaListadoViewModel = {
        //     //con observableArray, estamos diciendo que los cambios que ocurran en esta propiedad se van a reflejar
        //     //en la interfas grafica de la aplicacion
        //     //y se actualizara de forma automaticamente, ya que es un observableArray, y reaccionara a la
        //     //propiedad tareas, a cualqueir cambio que ocurra en tareas
        //     tareas: ko.observableArray([
        //         // { titulo: 'Tarea 1' },
        //         // { titulo: 'Tarea 2' },
        //         // { titulo: 'Tarea 3' },
        //         // { titulo: 'Tarea 4' },
        //     ]),
        //     //creamos una propiedad para ver si estamso cargando o no
        //     //observable, sera un simple valor en este caso un boleano
        //     cargando: ko.observable(true)
        // }
        function tareaListadoViewModelFn() {
            //hacemos una refeerencia al objeto que se saca de esta funcion
            //guardamos la referencia en self (yomismo)
            var self = this;
            self.tareas = ko.observableArray([]);
            self.cargando = ko.observable(true);
            // usaremos una funcion AudioParam indicar queueMicrotask no hay tareas
            self.noHayTareas = ko.pureComputed(function () {
                if (self.cargando()) {
                    return false;
                }
                //verificamos si existe longitud o registros
                return self.tareas().length === 0;
            })
        };

        function tareaElementoListadoViewModel({ id, titulo }) {
            var self = this;
            self.id = ko.observable(id);
            self.titulo = ko.observable(titulo);
            self.esNuevo = ko.pureComputed(function () {
                return self.id() == 0;
            })
        };

        const tareaListadoViewModel = new tareaListadoViewModelFn();

        //ejecutamos una tarea depsues de un tiempo
        setTimeout(() => {
            //se ejecutara luego de 2 segundos lo que este dentro de los corchetes
            // tareasListadoViewModel.tareas.push({ titulo: 'Tarea titulo push' });
            //actualizamos un observable
            tareaListadoViewModel.cargando(false)
        }, 100)

        //aplicamos KNOCKOUTJS en la vista html usanod el id, debemos usar la palabra reservada
        //ko, que invoca a KNOCKOUTJS
        ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
    </script>
    
}